name: Python package
on:
  push:
    branches:
      - 'feature/prashanth-ver1'
  workflow_call:
    inputs:
      sonar_scan_on_app:
        description: "Perform SonarQube scan on front-end code"
        required: true
        type: boolean
      sonar_gate_on_app:
        description: "Perform SonarQube quality gate check on front-end code"
        required: true
        type: boolean
      sonar_scan_on_api:
        description: "Perform SonarQube scan on API code"
        required: true
        type: boolean
      sonar_gate_on_api:
        description: "Perform SonarQube quality gate check on API code"
        required: true
        type: boolean


jobs:
  version_number:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.step1.outputs.test }}
    strategy:
      matrix:
        python-version: [ '3.8' ]

    steps:
      - id: step1
        run: |
          date_part=$(date +%y%m.%-d%H)
          PKG_VERSION="1."$date_part
          echo $PKG_VERSION
          echo "PKG_VERSION=${PKG_VERSION}" >> $GITHUB_ENV
          echo "::set-output name=test::${PKG_VERSION}"

  test_on_ubuntu:
    runs-on: ubuntu-latest
    needs: version_number
    strategy:
      matrix:
        python-version: [ '3.8' ]

    name: Python ${{ matrix.python-version }} test

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          echo "Python version is : ${{ matrix.python-version }}"
          pip --version
          pip install -r requirements.txt
          pip list
          pip install pylint
          pip install pytest
          pip install coverage
          pip install databricks-cli
      
      - name: Insert the credentials.
        run: |
         sed -i "s/env_PITSSecret/${{ secrets.env_PITSSecret }}/g" tests/testconfig.ini
         sed -i "s/env_Azure/${{ secrets.env_Azure }}/g" tests/testconfig.ini
         sed -i "s/env_dbtoken/${{ secrets.env_dbtoken }}/g" tests/testconfig.ini

      - name: Run pylint
        run: pylint ${{ github.workspace }}/*.py

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
           -Dsonar.projectKey=com.shell.qgcanalytics
               -Dsonar.python.coverage.reportPaths=./reports/sonar-report.xml
               -Dsonar.python.coverage.testExecutionReportPaths=./reports/sonar-report.xml

        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # - name: SonarQube Quality Gate check
      #   uses: sonarsource/sonarqube-quality-gate-action@master
        # env:
        #  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Buildwheel
        run: |
           python -m pip install --user --upgrade build
           python -m build .
           echo "VERSION = $(python setup.py --version)" >> $GITHUB_ENV

      - name: Upload the wheels
        uses: actions/upload-artifact@v2
        with:
          name: built_wheel
          path: dist/*.whl

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        if: success()

      - name: Install Databricks CLI
        run: |
          pip install databricks-cli

      - name: Upload .whl file to Azure Databricks DBFS
        run: |
          # Replace these variables with your values
          DATABRICKS_HOST="${{ secrets.DATABRICKS_HOST }}"
          DATABRICKS_TOKEN="${{ secrets.DATABRICKS_TOKEN }}"

          databricks configure --token --token "$DATABRICKS_TOKEN" --host "$DATABRICKS_HOST"
          databricks fs cp dist/*.whl dbfs:/raw_qgc_analytics/file.whl

      # - name: Authenticate with Azure
      #   run: |
      #     az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
      #   if: success()

      # - name: Upload .whl file to Azure Databricks DBFS-new
      #   run: |
      #     az databricks fs cp dist/*.whl dbfs:/raw_qgc_analytics/file.whl
      #   if: success()

      # - name: Upload .whl file to Databricks
      #   run: |
      #     # Replace these variables with your values
   
      #     DATABRICKS_HOST=https://adb-658137803218454.14.azuredatabricks.net/?o=658137803218454#
      #     DATABRICKS_TOKEN= ${{ secrets.DATABRICKS_TOKEN }}

      #     # Authenticate with Databricks using the token
      #     databricks configure --token --token $DATABRICKS_TOKEN --host $DATABRICKS_HOST

      #     # Upload the .whl file to a cluster
      #     databricks fs cp dist/*.whl dbfs:/raw_qgc_analytics


      # - name: Run tests with coverage
      #   run: |
      #     coverage run --source qgcanalytics -m unittest discover
      #     coverage xml -i
      #   env:
      #     COVERAGE_FILE: .coverage

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./dist/*.whl
          tag_name: v2.0.0.dev-${{ matrix.python-version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: startsWith(github.ref, 'refs/tags/')

      - name: Upload the wheels
        uses: actions/upload-artifact@v2
        with:
          name: built_wheel
          path: dist/*.whl
